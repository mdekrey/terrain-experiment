using Game.Domain.Caves;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace Game.Logic.Caves
{
    public class CaveGeneratorShould
    {
        [Fact]
        public async Task GenerateACave()
        {
            var seed = new Random().Next();
            var cave = await MakeCave(seed);
            var inlineDataRecord = $@"[InlineData({seed}, @""
{cave}"")]";
            Console.WriteLine(inlineDataRecord);
        }

        [Theory]
        [InlineData(0, @"
██████████████████████████████████████████████████
██████████       █████████      ██████████████████
█████████/        ███████        █████████████████
██████████         ██████*       █████████████████
████████████   ██   ███████████  █████████████████
█████████████  ██    ██████████  █████████████████
█████████████  █  ██  █████████  █████████████████
█████████████    ███  ██████*     ████████████████
█████████████    ████  █████     *████████████████
█████████████     *██     █   ████████████████████
████████████       ██        █████████████████████
████████████       ███       █████████████████████
████████████       ████      █████████████████████
█████████████       ███████  █████████████████████
██████████████      ███████**█████████████████████
████████████████     █████████████████████████████
██████████████████    ████████████████████████████
██████████████████     ███████████████████████████
██████████████████  █    █████████████████████████
████████████████   ███    *███████████████████████
███████████████*  ████     ███████████████████████
████████████████  █████   *███████████████████████
█████████████████  ███████████████████████████████
█████████████████  ███████████████████████████████
███████████████   ████████████████████████████████
██████████████    ████████████████████████████████
██████████████    *███████████████████████████████
███████████████  █*███████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████")]
        [InlineData(38361, @"
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
████████  /███████████████████████████████████████
███████    ██████████████████████████*████████████
███████   ██████████████████████████   ███████████
██████   ███████████████████████*       ██████████
██████   ███████████████████████         █████████
██*█      █████████████    █████    ██    ████████
██*          █████████      ████   ████   ████████
███    ████   ████████   █   ███   ████   ████████
███   ██████   ████     ████  █   █████   ████████
██   ████████           ████     ██████     *█████
█    ███████████   █     ███    ██████      *█████
█    ███████████  ███          ██████   ██████████
██   ████* █████  ████████     █████    ██████████
██   ████   ████  █████████     ████    ██████████
███*█████    ███  █████████████  ███    ███  █████
██████████        █████████████   ██   ███     *██
████████████      ███████* ████   ██   ██    █ *██
████████████      ███████   ███  ███   ██  ███████
████████████*        ████   ██   ████      ███████
██████████████        ███       █████      ███████
███████████████       ███    █████        ████████
████████████████      ██*  █████*      ███████████
████████████████      ███*██████*     ████████████
█████████████████     ████████████  ██████████████
███████████████████  *████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████")]
        [InlineData(511492406, @"
██████████████████████████████████████████████████
██/      ██   ████████████████████████████████████
██*           *███████████████████████████████████
███████       ████████████████████████████████████
███████    ███████████████████████████████████████
█*         ███████████████████████████████████████
█      ███  █   ██████████████████████████████████
██   █████       █████████████████████████████████
███  █████       █████████*███████████████████████
███   ████   ███  ██  ███   ██████████████████████
██    ████  ████       █    ██████████████████████
█*    ████  ████         ██   ████████████████████
██   ████  █████   ██   ███    ███████████████████
████████  ███████*███   ███      *████████████████
███████   ███████████   ██*       ████████████████
███████   ████████████   ██      ███████*█████████
███████   ████████████   ████   *█████    ████████
██████     ███████████  █████████████     ████████
████    █  ███████████  █████████████     ████████
██     ██  ████████████   █*██████████   █████████
█*     ██   ████████████   **██████████  █████████
██*██  ██    ███████████████████████████  ████████
█████  ███   ███████████████████████████  *███████
█████  ████*████████████████████████████  ████████
████  ████████████████████*   █████████   ████████
███  █████████████████████                  ██████
███  ██████████████████████                 *█████
████  █    █  ████████**██████   ███        ██████
█████          ███████  ███████  ███     █████████
█████   █      ███████  ████████*███    ██████████
██    ███         ████  █████████████   ██████████
█     ███   ███         █████████████     *███████
█    ████   ███         █████████████      ███████
██  █████    ██          ████████████     ████████
██████████    █          █████**████    ██████████
██████████   *██   ██    █████  ███   ████████████
███████████*█████████    ████   ██    ██  ████████
██████████████████████          ██         ███████
██████████████████████          ██          ██████
████████████████████     █████              ██████
██████████████████*     ██████      █  ██      *██
██████████████████   ███████       ███████    █*██
███████████████████  ██████    ██*█████████  █████
███████████████████  ██████   ████████████████████
███████████████████  ██████   ████████████████████
███████████████████   ██████  ████████████████████
███████████████████     *████  ███████████████████
███████████████████      █████  *█████████████████
████████████████████    *██████ *█████████████████
██████████████████████████████████████████████████")]
        [InlineData(1268376577, @"
██████████████████████████████████████████████████
█████████████████   /█████████████████████████████
████████████████    *█████████████████████████████
████████████████  ████████████████████████████████
███████████████   ████████████████████████████████
███████████████   ████████████████████████████████
███████████████     ██████████████████████████████
████████████*██      █████████████████████████████
███████████     █    █████████████████████████████
██████████      ███*██████████████████████████████
█████           ██████████████████████████████████
████         █*███████████████████████████████████
████        ██████████████████████████████████████
███     ██ ███████████████████████████████████████
██     ███ ███████████████████████████████████████
█  ██████   ██████████████████████████████████████
█  ██████   ██████████████████████████████████████
█**█████    ██████████████████████████████████████
███████     ██████████████████████████████████████
██████        ████████████████████████████████████
█████     █    *██████████████████████████████████
████     ███    ██████████████████████████████████
███     █████   ██████████████████████████████████
███    ██████   ███ *█████████████████████████████
████  ███████  ███   █████████████████████████████
████████████   ███   █████████████████████████████
███████████    ███   █████████████████████████████
███████████     ███  █████████████████████████████
██████████  ██   ██    ███████████████████████████
█████████   ███   █     ██████████████████████████
█████████   ████        ██████████████████████████
██████████  *████       ██*███████████████████████
███████████*█████*          ██████████████████████
█████████████████████████   ██████████████████████
██████████████████████████ *██████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████
██████████████████████████████████████████████████")]
        public async Task GenerateConsistentCaves(int seed, string cave)
        {
            Assert.Equal(cave.Trim().Replace("\r", ""), await MakeCave(seed));
        }

        private async Task<string> MakeCave(int seed)
        {
            var caveGenerator = new CaveGenerator(50, 50, 2, seed);
            var cave = await caveGenerator.Generate();
            var map = cave.Map;
            var treasure = cave.Treasure;
            var entrance = cave.Entrance;
            var mapDisplay = string.Join("\n", map
              .Select((row, y) => string.Join("", row
                .Select((e, x) => entrance.Equals(new CaveCoordinate(x, y)) ? "/"
            : treasure.Any(entry => entry.Equals(new CaveCoordinate(x, y))) ? "*"
              : e ? "█"
                : " "))
              ));
            return mapDisplay;
        }

    }
}
