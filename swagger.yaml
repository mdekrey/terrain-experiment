openapi: 3.0.1
info:
  title: OpenWorld Terrain API
  description: For the terrain-experiment project
  contact:
    name: https://github.com/mdekrey
  license:
    name: MIT
  version: 1.0.0
servers:
- url: http://localhost:55779/api
paths:
  /terrain:
    post:
      tags:
        - Terrain
      description: Gets the terrain for a region
      operationId: getTerrain
      requestBody:
        description: Describes the region to retrieve
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTerrainRequest'
        required: true
      responses:
        200:
          description: terrain response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTerrainResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /terrain/cave:
    post:
      tags:
        - Terrain
      description: Gets the cave at a specific location
      operationId: getCave
      requestBody:
        description: Describes the cave to retrieve
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCaveRequest'
        required: true
      responses:
        200:
          description: cave response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCaveResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /my/character:
    get:
      tags:
        - My
      description: Gets the current user's characters
      operationId: getMyCharacters
      responses:
        200:
          description: list of characters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedListOfCharacters'
  /my/character/{characterId}:
    get:
      tags:
        - My
      description: Get a character owned by the current user
      operationId: getMyCharacter
      parameters:
      - name: characterId
        in: path
        description: ID of character to fetch
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: character response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
  # /pets/{id}:
  #   get:
  #     description: Returns a user based on a single ID, if the user does not have
  #       access to the pet
  #     operationId: findPetById
  #     parameters:
  #     - name: id
  #       in: path
  #       description: ID of pet to fetch
  #       required: true
  #       schema:
  #         type: integer
  #         format: int64
  #     responses:
  #       200:
  #         description: pet response
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Pet'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/Pet'
  #           text/xml:
  #             schema:
  #               $ref: '#/components/schemas/Pet'
  #           text/html:
  #             schema:
  #               $ref: '#/components/schemas/Pet'
  #       default:
  #         description: unexpected error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ErrorModel'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/ErrorModel'
  #           text/xml:
  #             schema:
  #               $ref: '#/components/schemas/ErrorModel'
  #           text/html:
  #             schema:
  #               $ref: '#/components/schemas/ErrorModel'
  #   delete:
  #     description: deletes a single pet based on the ID supplied
  #     operationId: deletePet
  #     parameters:
  #     - name: id
  #       in: path
  #       description: ID of pet to delete
  #       required: true
  #       schema:
  #         type: integer
  #         format: int64
  #     responses:
  #       204:
  #         description: pet deleted
  #         content: {}
  #       default:
  #         description: unexpected error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ErrorModel'
components:
  schemas:
    ErrorModel:
      required:
      - code
      type: object
      properties:
        code:
          type: string
          pattern: '^[A-Za-z0-9-]+(:[A-Za-z0-9-]+)*$'
        args:
          type: object
          additionalProperties:
            type: string
    GetTerrainRequest:
      required:
      - coordinate
      - isDetail
      type: object
      properties:
        coordinate:
          $ref: '#/components/schemas/IntCoordinate'
        isDetail:
          type: boolean
        size:
          $ref: '#/components/schemas/GameSize'
          default: { width: 100, height: 100 }
    GetTerrainResponse:
      required:
      - terrain
      - specialLocations
      type: object
      properties:
        terrain:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                # TODO: 3.0.0 preview 7
                # $ref: '#/components/schemas/VisualTerrainType'
                type: string
        specialLocations:
          type: array
          items:
            $ref: '#/components/schemas/SpecialLocation'
    GetCaveRequest:
      required:
      - coordinate
      type: object
      properties:
        coordinate:
          $ref: '#/components/schemas/IntCoordinate'
    GetCaveResponse:
      required:
        - isSolid
        - entrance
        - treasure
      type: object
      properties:
        isSolid:
          type: array
          items:
            type: array
            items:
              type: boolean
        entrance:
          $ref: '#/components/schemas/IntCoordinate'
        treasure:
          type: array
          items:
            $ref: '#/components/schemas/IntCoordinate'
    IntCoordinate:
      required:
      - x
      - y
      type: object
      properties:
        x:
          type: integer
          format: int64
        y:
          type: integer
          format: int64
    GameSize:
      required:
      - width
      - height
      type: object
      properties:
        width:
          type: integer
        height:
          type: integer
    SpecialLocation:
      required:
      - initial
      - target
      type: object
      properties:
        initial:
          $ref: '#/components/schemas/IntCoordinate'
        target:
          $ref: '#/components/schemas/IntCoordinate'
    PaginatedListOfCharacters:
      required:
      - totalCount
      - initialOffset
      - items
      type: object
      properties:
        totalCount:
          type: integer
        initialOffset:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/Character'
    Character:
      required:
      - id
      - pawnType
      - coordinate
      type: object
      properties:
        id:
          type: string
          format: uuid
        pawnType:
          type: string
        coordinate:
          $ref: '#/components/schemas/IntCoordinate'
    VisualTerrainType:
      type: string
      enum:
      - Snow
      - SnowWithGrass
      - SnowWithBushes
      - SnowWithConiferousForests
      - Grassland
      - Bushes
      - ConiferousForests
      - HotDeserts
      - DeciduousForests
      - TropicalRainForests
      - ShallowWater
      - DeepWater
      - SnowyMountains
      - Mountains
      - SnowyHills
      - Hills
      - Ice
      - Cave
      - Shrine
      - Teleportal
      - ShrineFancyTile
      - DarkRedTile
      - Flowers
      - DogStatue
    PawnType:
      type: string
      enum:
      - Hero
      - MaleSoldier
      - FemaleSoldier
      - MaleSage
      - FemaleSage
      - MaleGoofoff
      - FemaleGoofoff
      - MaleWizard
      - FemaleWizard
      - MaleMerchant
      - FemaleMerchant
      - MalePilgrim
      - FemalePilgrim
      - MaleFighter
      - FemaleFighter
      - Woman
      - Guard
      - OldMan
      - Priest1
      - Priest2
      - Princess
      - King
      - Ship
      - Demon
      - HornedMan
      - Boy
      - Bard
      - Seneschal
      - Man
      - Warrior
      - Bellydancer
      - Ghost
      - Shopkeeper
      - Horse
      - Cat
      - Girl1
      - Girl2
      - Dragon
      - Girl3
      - Elf
      - Slime
      - Dwarf
      - Prisoner
      - Dancer
      - Skeleton
    Direction:
      type: string
      enum:
      - Up
      - Down
      - Right
      - Left
    # Pet:
    #   allOf:
    #   - $ref: '#/components/schemas/NewPet'
    #   - required:
    #     - id
    #     type: object
    #     properties:
    #       id:
    #         type: integer
    #         format: int64
    # NewPet:
    #   required:
    #   - name
    #   type: object
    #   properties:
    #     name:
    #       type: string
    #     tag:
    #       type: string
